-I declare in the class String and class PlaneComponent before the pre-definition because of i use them before their initialization

-namespace patch i am definited them because i need it for the to_string function

-Abstract classes οι Object, Employee, PlaneComponent

-class Object: set the protected to object_id to which is defined outside the class, increments each time for uniqueness, in addition I create some basic functions with virtual Object * clone () = 0 and String toString () = 0

-class String: inherited from Object with protected name and i create basic functions using ready-made library functions

class employee: public object with protected string * name_employee and virtual workon vision (PlaneComponent * pas_com) = 0 and reference (PlaneComponent * pas_com) = 0

class PlaneComponent : public Object με protected: bool check_clean , bool check_security , bool check_maintenance οι οποιες μεταβλητές θα αρχικοποιηθούν 0 ως ένδιξη οτι δεν εχουν υλοποιηθεί οι αντιστοιχες εργασίες που τους αναλογούν,ορίζονται και αντιστοιχες συναρτησείς που βοηθούν την διαχείρηση τους και με το όρισμα ως virtual την bool ready_check()=0 , virtual void process(Employee* empl)=0

-class SecurityEmployee:public Employee σημαντικο σημειο της κλασής η χρήση των workon και report συναρτήσεων οι οποίες συνδένται με την PlaneComponent και υλοποιυν τον έλενχο αν έγινε η εργασια και αλλάζουν την check_security σε 1 ετσι ωστε μας δηλώνει οτι πέρασε η εργασια εκτελέστηκε αλλα και με το report το οποιο εκτυπώνει και το αντίστοιχο ΟΚ.

class MaintenanceEmployee:public Employee και class CleaningEmployee:public Employee αντίστοιχες με class SecurityEmployee:public Employee.
-class Passengercompartment:public PlaneComponent με private Passengercompartment* pas_com = NULL για ελενχο αν υπαχρει περαιτέρο Passengercompartment και αντιστοιχει constractor για να ικανοποιεί ολες τις συνθήκες με αντίστοιχη προυπόθεση και στην process η οποία μας οδηγεί το εργαζόμενο να κάνει την εργασία του και να ελένχεται στην ready_check αν έγιναν ολες οι απαραίτητες του τομέα,και στην equal να γίνονται μια σειρά απο ελένχους.

-PrivateCompartment : public PlaneComponent απλα εναν constractor και εναν distractor

-class EquipmentCompartment : public PrivateCompartment παρόμοιες λειτουργίς με την Passengercompartment με διαφορα στους την αφαίρεση των ελένχων για τον επιπλέον χώρο

CargoBay : public PrivateCompartment αντιστοιχες λειτουργιες με SecurityEmployee αλλά χωρίς αμφιβολία για επιπλέον χώρο εξοπλισμού.
-class Plane : public Object τελική κλάση με private: String title; int space_passenger CargoBay * cargo_bay EquipmentCompartment pas_one EquipmentCompartment* pas_two EquipmentCompartment* pas_three vector<Passengercompartment*> Passenger_compartment με αντιστοιχες αρχικοποιησεις στον constractor με τις βασικες συναρτήσεις να διατηρουν την προηγουμενη τους λογίκη αλλά σε μεγαλύτερη εκταση των ελένχων και με τον vector<Passengercompartment*> Passenger_compartment να προσθέτει καποια στιχεία.

-clone_encrypt_and_print απλη χρήση των συναρτήσεων

About
I use fuctions (constractor/distractor and configuration classes) with C++, in order to create a discussion forum

Topics
Resources
 Readme
Releases
No releases published
Create a new release
Packages
No packages published
Publish your first package
Languages
C++
100.0%
